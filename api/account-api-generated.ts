/* tslint:disable */
/* eslint-disable */
/*
1Password Partnership API

Trusted by more than 100,000 businesses to protect their data, 1Password gives you complete control over passwords and other sensitive business information. 

As an integral layer of the Identity and Access Management (IAM) stack, 1Password protects all employee accounts – even those you aren't aware of. Give employees secure access to any app or service and safely share everything you need to work together – including logins, documents, credit cards, and more – while keeping everything else private.

1Password is easy to deploy and integrates with Azure AD, Okta, OneLogin, and Slack, so you can automatically provision employees using the systems you already trust. It's simple to manage and fits seamlessly into your team's workflow, so you can secure your business without compromising productivity.

The version of the OpenAPI document: 2.0.0
Contact: partners@1password.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Account } from '../models';
// @ts-ignore
import { CreatePartnerAccountRequest } from '../models';
// @ts-ignore
import { UpdatePartnerAccountRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Begins provisioning process for a new partner associated 1Password account.
         * @param {CreatePartnerAccountRequest} createPartnerAccountRequest Request to initialize a partner account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beginProvisioningProcess: async (createPartnerAccountRequest: CreatePartnerAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPartnerAccountRequest' is not null or undefined
            assertParamExists('beginProvisioningProcess', 'createPartnerAccountRequest', createPartnerAccountRequest)
            const localVarPath = `/api/v1/partners/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createPartnerAccountRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/partners/accounts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createPartnerAccountRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an account based on an UID.
         * @param {string} customerAccountUid Unique ID of an account to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByUid: async (customerAccountUid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerAccountUid' is not null or undefined
            assertParamExists('getByUid', 'customerAccountUid', customerAccountUid)
            const localVarPath = `/api/v1/partners/accounts/{customer_account_uid}`
                .replace(`{${"customer_account_uid"}}`, encodeURIComponent(String(customerAccountUid !== undefined ? customerAccountUid : `-customer_account_uid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/partners/accounts/{customer_account_uid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes an account from the partnership domain.
         * @param {string} customerAccountUid Unique ID of partner_account to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromPartnership: async (customerAccountUid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerAccountUid' is not null or undefined
            assertParamExists('removeFromPartnership', 'customerAccountUid', customerAccountUid)
            const localVarPath = `/api/v1/partners/accounts/{customer_account_uid}`
                .replace(`{${"customer_account_uid"}}`, encodeURIComponent(String(customerAccountUid !== undefined ? customerAccountUid : `-customer_account_uid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/partners/accounts/{customer_account_uid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the ends_at attribute of an account based on an UID.
         * @param {string} customerAccountUid Unique ID of partner_account to update.
         * @param {UpdatePartnerAccountRequest} [updatePartnerAccountRequest] Request to update the ends_at attribute of a partner account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEndsAtByUid: async (customerAccountUid: string, updatePartnerAccountRequest?: UpdatePartnerAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerAccountUid' is not null or undefined
            assertParamExists('updateEndsAtByUid', 'customerAccountUid', customerAccountUid)
            const localVarPath = `/api/v1/partners/accounts/{customer_account_uid}`
                .replace(`{${"customer_account_uid"}}`, encodeURIComponent(String(customerAccountUid !== undefined ? customerAccountUid : `-customer_account_uid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updatePartnerAccountRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/partners/accounts/{customer_account_uid}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updatePartnerAccountRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Begins provisioning process for a new partner associated 1Password account.
         * @param {AccountApiBeginProvisioningProcessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async beginProvisioningProcess(requestParameters: AccountApiBeginProvisioningProcessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const createPartnerAccountRequest: CreatePartnerAccountRequest = {
                customer_account_uid: requestParameters.customer_account_uid,
                account_type: requestParameters.account_type,
                domain: requestParameters.domain,
                ends_at: requestParameters.ends_at
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.beginProvisioningProcess(createPartnerAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns an account based on an UID.
         * @param {AccountApiGetByUidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByUid(requestParameters: AccountApiGetByUidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByUid(requestParameters.customerAccountUid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes an account from the partnership domain.
         * @param {AccountApiRemoveFromPartnershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromPartnership(requestParameters: AccountApiRemoveFromPartnershipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromPartnership(requestParameters.customerAccountUid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the ends_at attribute of an account based on an UID.
         * @param {AccountApiUpdateEndsAtByUidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEndsAtByUid(requestParameters: AccountApiUpdateEndsAtByUidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const updatePartnerAccountRequest: UpdatePartnerAccountRequest = {
                ends_at: requestParameters.ends_at
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEndsAtByUid(requestParameters.customerAccountUid, updatePartnerAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * Begins provisioning process for a new partner associated 1Password account.
         * @param {AccountApiBeginProvisioningProcessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beginProvisioningProcess(requestParameters: AccountApiBeginProvisioningProcessRequest, options?: AxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.beginProvisioningProcess(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an account based on an UID.
         * @param {AccountApiGetByUidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByUid(requestParameters: AccountApiGetByUidRequest, options?: AxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.getByUid(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes an account from the partnership domain.
         * @param {AccountApiRemoveFromPartnershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromPartnership(requestParameters: AccountApiRemoveFromPartnershipRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFromPartnership(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the ends_at attribute of an account based on an UID.
         * @param {AccountApiUpdateEndsAtByUidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEndsAtByUid(requestParameters: AccountApiUpdateEndsAtByUidRequest, options?: AxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.updateEndsAtByUid(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for beginProvisioningProcess operation in AccountApi.
 * @export
 * @interface AccountApiBeginProvisioningProcessRequest
 */
export type AccountApiBeginProvisioningProcessRequest = {
    
} & CreatePartnerAccountRequest

/**
 * Request parameters for getByUid operation in AccountApi.
 * @export
 * @interface AccountApiGetByUidRequest
 */
export type AccountApiGetByUidRequest = {
    
    /**
    * Unique ID of an account to retrieve.
    * @type {string}
    * @memberof AccountApiGetByUid
    */
    readonly customerAccountUid: string
    
}

/**
 * Request parameters for removeFromPartnership operation in AccountApi.
 * @export
 * @interface AccountApiRemoveFromPartnershipRequest
 */
export type AccountApiRemoveFromPartnershipRequest = {
    
    /**
    * Unique ID of partner_account to delete.
    * @type {string}
    * @memberof AccountApiRemoveFromPartnership
    */
    readonly customerAccountUid: string
    
}

/**
 * Request parameters for updateEndsAtByUid operation in AccountApi.
 * @export
 * @interface AccountApiUpdateEndsAtByUidRequest
 */
export type AccountApiUpdateEndsAtByUidRequest = {
    
    /**
    * Unique ID of partner_account to update.
    * @type {string}
    * @memberof AccountApiUpdateEndsAtByUid
    */
    readonly customerAccountUid: string
    
} & UpdatePartnerAccountRequest

/**
 * AccountApiGenerated - object-oriented interface
 * @export
 * @class AccountApiGenerated
 * @extends {BaseAPI}
 */
export class AccountApiGenerated extends BaseAPI {
    /**
     * Begins provisioning process for a new partner associated 1Password account.
     * @param {AccountApiBeginProvisioningProcessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public beginProvisioningProcess(requestParameters: AccountApiBeginProvisioningProcessRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).beginProvisioningProcess(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an account based on an UID.
     * @param {AccountApiGetByUidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public getByUid(requestParameters: AccountApiGetByUidRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getByUid(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes an account from the partnership domain.
     * @param {AccountApiRemoveFromPartnershipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public removeFromPartnership(requestParameters: AccountApiRemoveFromPartnershipRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).removeFromPartnership(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the ends_at attribute of an account based on an UID.
     * @param {AccountApiUpdateEndsAtByUidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public updateEndsAtByUid(requestParameters: AccountApiUpdateEndsAtByUidRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).updateEndsAtByUid(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
